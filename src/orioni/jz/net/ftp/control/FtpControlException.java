package orioni.jz.net.ftp.control;

/**
 * This type of exception is thrown when an error occurs while using the high-level functionality of the
 * {@link orioni.jz.net.ftp.control} package.  The <code>EXCEPTION_TYPE_XXXX</code> constants indicate the nature
 * of the exception.
 *
 * @author Zachary Palmer
 */
public class FtpControlException extends Exception
{
// STATIC FIELDS /////////////////////////////////////////////////////////////////

// CONSTANTS /////////////////////////////////////////////////////////////////////

	/** A constant representing that this {@link FtpControlException} is being thrown because the host allowed the
	 *  connection to occur but terminated it with its welcome response. */
	public static final int EXCEPTION_TYPE_CONNECTION_CLOSED_BEFORE_AUTHORIZATION       =           -1;
	/** A constant representing that this {@link FtpControlException} is being thrown because user authorization
	 *  failed when communicating with the server. */
	public static final int EXCEPTION_TYPE_AUTHORIZATION_FAILED                         =           -2;
	/** A constant representing that this {@link FtpControlException} is being thrown because the server denied the
	 *  client the path of the client's starting directory. */
	public static final int EXCEPTION_TYPE_STARTING_DIRECTORY_NOT_PROVIDED              =           -3;
	/** A constant representing that this {@link FtpControlException} is being thrown because an error occurred during
	 *  the transfer of a file. */
	public static final int EXCEPTION_TYPE_TRANSFER_ERROR_OCCURRED                      =           -4;
	/** A constant representing that this {@link FtpControlException} is being thrown because an error occurred during
	 *  the execution of a "<code>REST</code>" command before transferring a file. */
	public static final int EXCEPTION_TYPE_RESUME_ERROR_OCCURRED                        =           -5;
	/** A constant representing that this {@link FtpControlException} is being thrown because of an unidentified
	 *  error. */
	public static final int EXCEPTION_TYPE_UNIDENTIFIED_ERROR                           =           -999;

// NON-STATIC FIELDS /////////////////////////////////////////////////////////////

	/** The type of exception being thrown, as one of the <code>FtpControlException.EXCEPTION_TYPE_XXXX</code>
	 *  constants. */
	protected int type;
	/** The error code returned by the FTP server, or <code>-1</code> if no error code was provided. */
	protected int errorCode;
	/** The text which was provided by the server when the error occurred, or <code>null</code> if no such error text
	 *  was provided (which is usually the case if the error state was detected on the client side). */
	protected String errorText;

// CONSTRUCTORS //////////////////////////////////////////////////////////////////

	/**
	 * Skeleton constructor.  Assumes that no error data was received from the server.
	 * @param type The type of exception being thrown, as one of the
	 *             <code>FtpControlException.EXCEPTION_TYPE_XXXX</code> constants.
	 * @param s A {@link String} describing the exception.
	 */
	public FtpControlException(int type, String s)
	{
		this(type, s, -1, null);
	}

	/**
	 * General constructor.
	 * @param type The type of exception being thrown, as one of the
	 *             <code>FtpControlException.EXCEPTION_TYPE_XXXX</code> constants.
	 * @param s A {@link String} describing the exception.
	 * @param errorCode The error code returned by the FTP server.
	 * @param errorText The text which was provided by the server when the error occurred, or <code>null</code> if no
	 *                   such error text was provided (which is usually the case if the error state was detected on the
	 *                   client side).
	 */
	public FtpControlException(int type, String s, int errorCode, String errorText)
	{
		super(s);
		this.type = type;
		this.errorCode = errorCode;
		this.errorText = errorText;
	}

// NON-STATIC METHODS ////////////////////////////////////////////////////////////

	/**
	 * Retrieves the type of this exception, as one of the <code>FtpControlException.EXCEPTION_TYPE_XXXX</code>
	 * constants.
	 * @return The type of this exception.
	 */
	public int getType()
	{
		return type;
	}

	/**
	 * Retrieves the error code that was returned by the server that generated this exception.  If this exception was
	 * generated by client-side analysis instead of a server-sent signal, the returned value is <code>-1</code>.
	 * @return The error code that was returned by the server that generated this exception, or <code>-1</code>, as
	 *         described above.
	 */
	public int getErrorCode()
	{
		return errorCode;
	}

	/**
	 * Retrieves the text which was provided by the server when the error occurred.  This will be <code>null</code> if
	 * no such error text was provided (which is usually the case if the error state was detected on the client side).
	 * @return The text which was provided by the server when the error occurred, or <code>null</code> if no such error
	 *         text was provided.
	 */
	public String getErrorText()
	{
		return errorText;
	}

// STATIC METHODS ////////////////////////////////////////////////////////////////

}